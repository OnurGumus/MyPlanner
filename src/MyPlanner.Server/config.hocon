config {
  connection-string = "Data Source=MyPlanner.db;"
  akka {
    persistence {
      query.journal.sql {
        # Implementation class of the SQL ReadJournalProvider
        class = "Akka.Persistence.Query.Sql.SqlReadJournalProvider, Akka.Persistence.Query.Sql"
        # Absolute path to the write journal plugin configuration entry that this
        # query journal will connect to.
        # If undefined (or "") it will connect to the default journal as specified by the
        # akka.persistence.journal.plugin property.
        write-plugin = ""
        # The SQL write journal is notifying the query side as soon as things
        # are persisted, but for efficiency reasons the query side retrieves the events
        # in batches that sometimes can be delayed up to the configured `refresh-interval`.
        refresh-interval = 1s
        # How many events to fetch in one query (replay) and keep buffered until they
        # are delivered downstreams.
        max-buffer-size = 20
      }
      journal {
        plugin = "akka.persistence.journal.sqlite"
        sqlite
        {
            connection-string = ${config.connection-string}
            auto-initialize = on
            event-adapters.tagger = "MyPlanner.Command.Actor+Tagger, MyPlanner.Command"
            event-adapter-bindings {
              "MyPlanner.Command.Common+IDefaultTag, MyPlanner.Command" = tagger
            }
          }
      }
      snapshot-store {
        plugin = "akka.persistence.snapshot-store.sqlite"
        sqlite {
          auto-initialize = on
          connection-string = ${config.connection-string} 
        }
      }
    }
    extensions = ["Akka.Cluster.Tools.PublishSubscribe.DistributedPubSubExtensionProvider,Akka.Cluster.Tools"]
    stdout-loglevel = INFO
    loglevel = INFO
    log-config-on-start = on
    
    actor {
      debug {
        receive = on
        autoreceive = on
        lifecycle = on
        event-stream = on
        unhandled = on
      }
      provider = "Akka.Cluster.ClusterActorRefProvider, Akka.Cluster"
      serializers {
        json = "Akka.Serialization.NewtonSoftJsonSerializer"
        plainnewtonsoft = "MyPlanner.Command.Common+PlainNewtonsoftJsonSerializer, MyPlanner.Command"
      }
      serialization-bindings {
        "System.Object" = json
        "MyPlanner.Command.Common+IDefaultTag, MyPlanner.Command" = plainnewtonsoft
      }
    }
    remote {
      dot-netty.tcp {
        public-hostname = "localhost"
        hostname = "localhost"
        port = 0
      }
    }
    cluster {
      auto-down-unreachable-after = 5s
      # sharding.remember-entities = true
    }
  }
}